## 学习环境搭建和简单使用
**termux 里 mysql 环境的搭建**  

```
// 1. 安装
pkg install mariadb


// 2. 查看是否安装成功
% mysql --version
mysql  Ver 15.1 Distrib 10.6.7-MariaDB, for Android (aarch64) using  EditLine wrapper

// 3. 初始化数据库（新版本自动初始化）
mysql_install_db

// 4. 启动mysql服务
% nohup mysqld &
[1] 25595  //进程的PID号
nohup mysqld &nohup: ignoring input and appending output to 'nohup.out'

// 5. 查看进程PID
ps aux|grep mysql

// 6. 停止mysql服务
kill -9 PID
kill -9 `pgrep mysql`

// 7. 登录mysql
mysql -u root
mysql -u $(whoami)

// 8. 切换mysql目录
cd ~/../usr/var/lib/mysql

// 9. 修改root密码
mysql -u $(whoami)  //登录
use mysql;
set password for 'root'@'localhost' = password('123');
flush privileges;  //刷新权限
quit;

// 10.使用root登录
mysql -u root -p

```
**linux环境的mysql的简单使用**  
```
//查看mysql版本
mysql --version
//退出mysql
quit          //退出mysql

//查看所有数据库
show databases;  

//数据库编码查询设置
1. 设置编码
mysql>create database atguigudb；
mysql>use atguigudb;
mysql>set names utf8;
2. 查询编码
show variables like "character%";

// 导入数据库
1. 新建空数据库，并设置数据库编码
mysql>create database atguigudb；
mysql>use atguigudb;
mysql>set names utf8;
2. 导入数据
mysql> source /data/data/com.termux/files/home/storage/shared/A-book/atguigudb.sql

// 导出数据到mysql文件
% mysqldump -u root -p123 --default-character-set=utf8 atguigudb>/data/data/com.termux/files/home/storage/shared/A-temp/newfile.sql

//创造数据库
create database 数据库名;   

//使用自己的数据库
use 数据库名;      

//查看表格
show tables;   //要求前面有use语句
show tables from 数据库名;

//创造表格
create table 表名称(
字段名  数据类型,
字段名 数据类型
);

//查看表的数据
select * from 数据库表名称;

//添加记录
insert into 表名称 values(值列表);
insert into student values(1,'张三');

//查看表的创建信息
show create table 表名称\G

//查看数据库的创建信息
show create database 数据库名\G

//删除表格
drop table 表名称;

//删除数据库
drop database 数据库名;
```

**表的简单使用**  
```
-- 1. 创建数据库并设置编码
CREATE DATABASE IF NOT EXISTS cc CHARACTER SET 'utf8';
-- 2. 创建表
CREATE TABLE money (day DATE, sum INT(7), type char(5), ps char(200));
-- 3.添加字段
ALTER TABLE money 
ADD typemoney INT(7) AFTER type;
-- 4.查看表创建数据
SHOW CREATE TABLE 数据库名\G
-- 4.按字段先后顺序添加数据
INSERT InTO money VALUES('2022-09-05',66, '-',233, '生活话费测试');
-- 5. 删除记录
DELETE FROM money WHERE day='2022-09-05';

```

## 基础知识
**sql的分类**  
SQL语言在功能上主要分为如下3大类：
1. DDL（Data Definition Languages、数据定义语言）
   1. 这些语句定义了不同的数据库、表、视图、索引等数据库对象，还可以用来创建、删除、修改数据库和数据表的结构。
   2. 主要的语句关键字包括`CREATE`、`DROP`、`ALTER`等。

2. DML（Data Manipulation Language、数据操作语言）
   1. 用于添加、删除、更新和查询数据库记录，并检查数据完整性。
   2. 主要的语句关键字包括`INSERT`、`DELETE`、`UPDATE`、`SELECT`等。
   3. SELECT是SQL语言的基础，最为重要。

3. DCL（Data Control Language、数据控制语言）
   1. 用于定义数据库、表、字段、用户的访问权限和安全级别。
   2. 主要的语句关键字包括`GRANT`、`REVOKE`、`COMMIT`、`ROLLBACK`、`SAVEPOINT`等。

**sql语言的规则**  
1. SQL 可以写在一行或者多行。为了提高可读性，各子句分行写，必要时使用缩进
2. 每条命令以 ; 或 \g 或 \G 结束
3. 字符串型和日期时间类型的数据可以使用单引号（' '）表示
4. 列的别名，尽量使用双引号（" "），而且不建议省略as
5. windows下不区分大小写，linux下区分大小写，避免bug所以建议。
   1. 数据库名、表名、表别名、字段名、字段别名等都小写。
   2. SQL 关键字、函数名、绑定变量等都大写

**注释**  
```sql
# 单行注释
-- 单行注释
/* 多行注释*/
```


## SELECT
**最基本的SELECT语句，生成表指定字段的结果集**  
```sql
1. 伪表
select 1  
select 1 from dual  //dual是伪表，和上一句相同。

2. 最基本的查询
select 字段1，字段2 from 表名；

3. 查看表中所有字段
select * from 表名称;

4. 列的别名
# 为结果集（查询结果返回的表）的字段重命名。
# 三种方式起别名1.空格 2.as 3.""
select employee_id emp_id,last_name AS lname,department_id "dp id"
from employees;

5. 去除重复行
# 尽量单独字段使用，将该字段重复的行只保留一个。
select DISTINCT employee_id 
from employees;

# 对employee_id ,last_name两个字段整体进行去重，没有意义。
SELECT DISTINCT employee_id ,last_name 
FROM employees;

6. 空值null参与运算
   1. 空值参与运算结果一定也为null
   2. 空值null 不等同于 0, ""。
一个空字符串的长度是 0，而一个空值的长度是空。而且，在 MySQL 里面，空值是占用空间的。
   3. 处理空值
SELECT employee_id，last_name，salary * 12 *(1 + IFNULL(commission_ptc，0)) FROM employees;  

7. 着重号`
# 当表名和关键字重复，使用表名时加着重号
SELECT * From FROM `order`

8. 查询常数
# 自动为每一行都匹配常数(为查询结果集添加一个字段，该字段每一行都匹配该常数)
SELECT 'chengcheng'，123，employee_id
FROM employees

9. 显示表结构(显示表中字段的详细信息)
DESCRIBE employees;
DESC employees;
```

**WHERE过滤数据**  
```sql
1. 过滤数字
SELECT *
FROM employees
WHERE department_id=90;

2. 过滤字符串
MariaDB [atguigudb]> Select *
    -> from employees
    -> where last_name='king';
# sql在win下不区分大小写不包括字符串里的。

3. where关键字必须紧挨着from的后面。
```

## 运算符
**算术运算符**  

算术运算符主要用于数学运算，其可以连接运算符前后的两个数值或表达式，对数值或表达式进行加（+）、减（-）、乘（*）、除（/）和取模（%）运算。

![image-20211012100749193](images/image-20211012100749193.png)

_1．加法与减法运算符_

```mysql
mysql> SELECT 100, 100 + 0, 100 - 0, 100 + 50, 100 + 50 -30, 100 + 35.5, 100 - 35.5 FROM dual;
+-----+---------+---------+----------+--------------+------------+------------+
| 100 | 100 + 0 | 100 - 0 | 100 + 50 | 100 + 50 -30 | 100 + 35.5 | 100 - 35.5 |
+-----+---------+---------+----------+--------------+------------+------------+
| 100 |  |  100 |     100 |      150 |          120 |      135.5 |       64.5 |
+-----+---------+---------+----------+--------------+------------+------------+
1 row in set (0.00 sec)
```

由运算结果可以得出如下结论：

> - 一个整数类型的值对整数进行加法和减法操作，结果还是一个整数
> - 一个整数类型的值对浮点数进行加法和减法操作，结果是一个浮点数；
> - 加法和减法的优先级相同，进行先加后减操作与进行先减后加操作的结果是一样的；
> - 在Java中，+的左右两边如果有字符串，那么表示字符串的拼接。但是在MySQL中+只表示数值相加。如果遇到非数值类型，先尝试转成数值，如果转失败，就按0计算。（补充：MySQL中字符串拼接要使用字符串函数CONCAT()实现）
>

_2．乘法与除法运算符_ 

```mysql
mysql> SELECT 100, 100 * 1, 100 * 1.0, 100 / 1.0, 100 / 2,100 + 2 * 5 / 2,100 /3, 100 DIV 0 FROM dual;
+-----+---------+-----------+-----------+---------+-----------------+---------+-----------+
| 100 | 100 * 1 | 100 * 1.0 | 100 / 1.0 | 100 / 2 | 100 + 2 * 5 / 2 | 100 /3  | 100 DIV 0 |
+-----+---------+-----------+-----------+---------+-----------------+---------+-----------+
| 100 |     100 |     100.0 |  100.0000 | 50.0000 |        105.0000 | 33.3333 |      NULL |
+-----+---------+-----------+-----------+---------+-----------------+---------+-----------+
1 row in set (0.00 sec)
```

```mysql
#计算出员工的年基本工资
SELECT employee_id,salary,salary * 12 annual_sal 
FROM employees;
```

由运算结果可以得出如下结论：

> - 一个数乘以整数1和除以整数1后仍得原数；
> - 一个数乘以浮点数1和除以浮点数1后变成浮点数，数值与原数相等；
> - 一个数除以整数后，不管是否能除尽，结果都为一个浮点数；
> - 一个数除以另一个数，除不尽时，结果为一个浮点数，并保留到小数点后4位；
> - 乘法和除法的优先级相同，进行先乘后除操作与先除后乘操作，得出的结果相同。
> - 在数学运算中，0不能用作除数，在MySQL中，一个数除以0为NULL。
>

_3．求模（求余）运算符_ 
  
```mysql
mysql> SELECT 12 % 3, 12 MOD 5 FROM dual;
+--------+----------+
| 12 % 3 | 12 MOD 5 |
+--------+----------+
|      0 |        2 |
+--------+----------+
1 row in set (0.00 sec)
```

```mysql
#筛选出employee_id是偶数的员工
SELECT * FROM employees
WHERE employee_id MOD 2 = 0;
```
> 如果被模数（前面的数）是正的，则结果是正的，被模数是负的则结果是负的。